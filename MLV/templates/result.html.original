{% extends 'task_common.html' %}

{% block title %}MLV Task - Result{% endblock title %}
{% block mode %}result{% endblock mode %}

{% block widget %}
{% include 'widgets.html' with id=id %}
{% endblock widget %}

{% block content %}
<strong>Task ID :</strong> {{ id }}<br>


<h3>Result</h3>
<span></span>

<div id="venngraph"></div>
<div id="loading">PLEASE WAIT ...</div>
<div id="panel">
  <div id="panel_info">
    <h3 id="title">Title</h3>
    <div id="text">Text</div>
    <div class="bottom"><a id="panel_close" href="#">Close</a></div>
  </div>
</div>

<script>
//  /var/www/htdocs/MLV/dongwon_module/VIS/htdocs/js/main.js
$(function() {
var graph = {{ graph | safe }};
var nodes = graph.nodes;
var edges = graph.edges;
var div = d3.select("#venngraph");
console.log('Total node count: ' + nodes.length);
console.log('Total edge count: ' + edges.length);

// 0. generate group count data for venn graph
var groups = {};
for (var i=0; i<nodes.length; i++)
{
  nodes[i].idx = i;   // additional information for vennGraph
  if (!(nodes[i].group in groups)) groups[nodes[i].group] = 0;
}
var kconds = []
for (var k in groups) { kconds.push( k.split('__') ); }
for (var i=0; i<nodes.length; i++)
{
  var cond = nodes[i].group;
  for (var j=0; j<kconds.length; j++)
  {
    var condvalid = true;
    for (var k=0; k<kconds[j].length; k++)
    {
      if (cond.indexOf(kconds[j][k])<0)
      {
        condvalid = false;
        break;
      }
    }
    if (condvalid) { groups[Object.keys(groups)[j]]++; }
  }
}
var grouplist = [];
for (var k in groups)
{
  grouplist.push( {'sets':k.split('__'), 'size':groups[k], 'figure':groups[k], 'label':k} );
}

// 1. generate venn graph
var clr = ColorMultiset(Object.keys(groups)).color;   // colorset optimized for multiset
var venn_objs = div.datum(grouplist);
var vennChart = venn.VennDiagram().width(600).height(500).colours(clr);
var venn_data = vennChart(venn_objs);  // contains radius,x,y, ...

// 2. create node neighbor object from edge object
// (add: x, y, neighbors)
var nodedict = {}
for (var i=0; i<nodes.length; i++)
{
  nodes[i].neighbors = [];
  nodedict[nodes[i].name] = nodes[i];
  nodes[i].x = 0;
  nodes[i].y = 0;
}
for (var i=0; i<edges.length; i++)
{
  edges[i].nsource = nodedict[edges[i].source];
  edges[i].ntarget = nodedict[edges[i].target];
  edges[i].nsource.neighbors.push(edges[i].ntarget);
  edges[i].ntarget.neighbors.push(edges[i].nsource);
}

// 3. pass venn param and graph to generate node graph
var vg = vennGraph(div, clr).width(600).height(500)
  .setNodes(nodes).setEdges(edges).setCircle(venn_data.circles).prepare();
var edge_data = vg.vennEdge(div.datum(edges));    // draw edge first
var node_data = vg.vennNode(div.datum(nodes));

// 4. zoom / resize handler
// zoom refer to: http://bl.ocks.org/TWiStErRob/b1c62730e01fe33baa2dea0d0aa29359
var zx=0, zy=0;
function zoomed()
{
  var zw_ = $("#venngraph").width(), zh_ = $("#venngraph").height();
  div.selectAll('g').attr('transform', 'translate(' + (d3.event.transform.x+zw_/2-300) + ',' + (d3.event.transform.y+zh_/2-250)+ ') scale(' + d3.event.transform.k +')')
  // if large scale, show line & text
  if (d3.event.transform.k > 5)
  {
    var opa = (d3.event.transform.k - 5)/2;
    if (opa > 1.0) opa = 1.0;
    div.select('.venn-edges')
      .attr('display', 'inline')
      .attr('opacity', opa);
    div.select('.venn-nodes-text')
      .attr('display', 'inline')
      .attr('opacity', opa);
  }
  else
  {
    div.select('.venn-edges')
      .attr('display', 'none')
      .attr('opacity', 0);
    div.select('.venn-nodes-text')
      .attr('display', 'none')
      .attr('opacity', 0);
  }
}
var zoom = d3.zoom()
  .scaleExtent([1, 8])
  .on("zoom", zoomed);
div.call(zoom);

function resize()
{
  // object reposition
  var zw_ = $("#venngraph").width(), zh_ = $("#venngraph").height();
  var svg = div.select('svg').attr('width',zw_).attr('height',zh_);
  div.select('svg').selectAll('g').call(zoom.transform, d3.zoomIdentity);
}
window.addEventListener("resize", resize);
resize();

// 5. node drag / tooltip handler (on node/venn)
// first, hide all edges (displaying all of them so much lag)
div.select('.venn-edges')
  .attr('opacity', 0)
  .attr('display', 'none');
// set tooltip
var tooltip = d3.select('body').append("div")
  .attr("class", "venntooltip small");
div.on("mousemove", function() {
  tooltip.style("left", (d3.event.pageX + 10) + "px")
         .style("top", (d3.event.pageY - 28) + "px");
});

// node hovering event
function node_mouseover(d,i)
{
  // highlight nodes
  names = d.neighbors.map(x => x.name);
  div.select('.venn-nodes').selectAll('circle')
    .each(function (d_neighbor,i) {
      if (d_neighbor == d) return;
      if (names.includes(d_neighbor.name))
      {
        d3.select(this).attr('class', 'connected');
      }
      else
      {
        d3.select(this).attr('class', 'notconnected');
      }
    });
  // highlight edges
  div.select('.venn-edges').selectAll('line')
    .each(function (d_edge, i) {
      if (d_edge.nsource.idx == d.idx || d_edge.ntarget.idx == d.idx)
      {
        d3.select(this).attr('class', 'connected');
      } else {
        d3.select(this).attr('class', 'notconnected');
      }
    });
  tooltip.transition().duration(40).style("opacity", 1);
  tooltip.html('<b>'+d.name+'</b><br>'+d.neighbors.length+' neighbors');
}
function node_mouseout(d,i)
{
  div.select('.venn-nodes').selectAll('circle').attr('class', null);
  div.select('.venn-edges').selectAll('line').attr('class', null);
  tooltip.transition().duration(2000).style("opacity", 0);
}
function node_click(d,i)
{
  $("#title").text(d.name);
  var names = d.neighbors.map(x => x.name);
  if (names.length == 0) names.push('(empty)');
  var html = 'Neighbors are:<br><ul><li>' + names.join('</li><li>') + '</li></ul>';
  $('#text').html(html);
  $("#panel").show();
}
div.select('.venn-nodes').selectAll('circle')
  .on("mouseover", node_mouseover)
  .on("mouseout", node_mouseout)
  .on("click", node_click);


div.selectAll(".venn-circle")
.on("mouseover", function(d, i) {
  // Display a tooltip with the current size
  tooltip.transition().duration(40).style("opacity", 1);
  tooltip.html('<b>' + d.label + '</b><br>' + d.size + " genes");
})
.on("mouseout", function(d, i) {
  tooltip.transition().duration(2000).style("opacity", 0);
});

// should support drag event?
function dragstarted() {}
function dragged() {}
function dragended() {}
var drag = d3.drag()
  .on("start", dragstarted)
  .on("drag", dragged)
  .on("end", dragended);


// 6. hide loading message
$('#loading').hide();
$('#panel_close').on('click', function() { $('#panel').hide(); });

});
</script>

{% endblock content %}
